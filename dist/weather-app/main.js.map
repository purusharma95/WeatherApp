{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/apixu.service.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/routes.ts","webpack:///./src/app/weather/weather.component.css","webpack:///./src/app/weather/weather.component.html","webpack:///./src/app/weather/weather.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApixuService {\n\n  constructor(private http: HttpClient) { }\n\n\n  getWeather(location){\n    return this.http.get('https://api.apixu.com/v1/current.json?key=8c44fb26a94446a3a89172743191804&q='+location\n    )}\n  }","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'weather-app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { WeatherComponent } from './weather/weather.component';\nimport {RouterModule} from '@angular/router';\nimport {allAppRoutes} from './routes';\nimport {ReactiveFormsModule } from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ApixuService} from \"./apixu.service\";\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WeatherComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    RouterModule.forRoot(allAppRoutes)\n    , ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [ApixuService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Routes} from \"@angular/router\";\r\n\r\nimport {WeatherComponent} from \"./weather/weather.component\";\r\n\r\nexport const allAppRoutes :Routes=[\r\n    { path: '',component:WeatherComponent}\r\n];","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3dlYXRoZXIvd2VhdGhlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <h3 class=\\\"text-center my-4\\\">Search for Weather:</h3>\\n        <form\\n          [formGroup]=\\\"weatherSearchForm\\\"\\n          (ngSubmit)=\\\"sendToAPIXU(weatherSearchForm.value)\\\"\\n        >\\n          <div class=\\\"form-group\\\">\\n            <input\\n              class=\\\"form-control\\\"\\n              type=\\\"text\\\"\\n              id=\\\"weatherLocation\\\"\\n              aria-describedby=\\\"weatherLocation\\\"\\n              placeholder=\\\"Please input a Location\\\"\\n              formControlName=\\\"location\\\"\\n            />\\n          </div>\\n          <div class=\\\"text-center\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-success btn-md\\\">\\n              Search for the weather\\n            </button>\\n          </div>\\n        </form>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <h3 class=\\\"text-center my-4\\\">Weather Details:</h3>\\n        <p class=\\\"text-center\\\">\\n          Current weather conditions: {{ this.weatherData?.current.condition.text\\n          }}.\\n        </p>\\n        <p class=\\\"text-center\\\">\\n          Temperature in Degrees Celsius: {{ this.weatherData?.current.temp_c }}\\n        </p>\\n        <p class=\\\"text-center\\\">\\n          Temperature in Degrees Farenheit: {{ this.weatherData?.current.temp_f }}\\n        </p>\\n        <p class=\\\"text-center\\\">\\n          Feels like in Degrees Celsius: {{ this.weatherData?.current.feelslike_c\\n          }}\\n        </p>\\n        <p class=\\\"text-center\\\">\\n          Feels like in Degrees Farenheit: {{\\n          this.weatherData?.current.feelslike_f }}\\n        </p>\\n        <p class=\\\"text-center\\\">\\n          Location Searched: {{ this.weatherData?.location.name }}, {{\\n          this.weatherData?.location.country }}.\\n        </p>\\n      </div>\\n    </div>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder,FormGroup} from '@angular/forms';\nimport {ApixuService} from \"../apixu.service\";\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent implements OnInit {\n   public weatherSearchForm:FormGroup;\n    public weatherData :any;\n   constructor(private formBuilder :FormBuilder,\n          private apixuService:ApixuService) { }\n\n  ngOnInit() {\n\n    this.weatherSearchForm=this.formBuilder.group({\n     location:['']\n\n    });\n  }\n   sendToAPIXU(formValues){\n    //  console.log(formValues);\n    this.apixuService\n    .getWeather(formValues.location)\n    .subscribe(data=>this.weatherData=data)\n   }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}